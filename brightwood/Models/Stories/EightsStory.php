<?php

namespace Brightwood\Models\Stories;

use App\Models\TelegramUser;
use Brightwood\Models\Cards\Card;
use Brightwood\Models\Cards\Events\Interfaces\CardEventInterface;
use Brightwood\Models\Cards\Games\EightsGame;
use Brightwood\Models\Cards\Players\Human;
use Brightwood\Models\Cards\Rank;
use Brightwood\Models\Cards\Suit;
use Brightwood\Models\Data\EightsData;
use Brightwood\Models\Language;
use Brightwood\Models\Messages\StoryMessage;
use Brightwood\Models\Messages\StoryMessageSequence;
use Brightwood\Models\Messages\TextMessage;
use Brightwood\Models\Stories\Core\Story;
use Brightwood\Serialization\Cards\Interfaces\RootDeserializerInterface;
use Brightwood\StoryBuilder;
use InvalidArgumentException;
use Plasticode\Util\Cases;
use Plasticode\Util\Text;
use Webmozart\Assert\Assert;

class EightsStory extends Story
{
    const ID = 3;
    const TITLE = '‚ô† –ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ ¬´–í–æ—Å—å–º–µ—Ä–∫–∏¬ª';
    const DESCRIPTION = '–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–∞–º–∏. –°–ª–æ–∂–Ω–æ—Å—Ç—å: 3/5';

    private const RULES_COMMAND = '/rules';
    private const DRAW_CARD_COMMAND = 'üé¥ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É';
    private const NO_CARDS_COMMAND = '‚ùå –ù–µ—Ç –∫–∞—Ä—Ç';

    private const START = 1;
    private const TWO_PLAYERS = 2;
    private const THREE_PLAYERS = 3;
    private const FOUR_PLAYERS = 4;
    private const PLAYERS_NUMBER_CHOICE = 5;
    private const START_GAME = 6;
    private const FINISH_GAME = 7;
    private const AUTO_MOVES = 8;
    private const HUMAN_MOVE = 9;
    private const SUIT_CHOICE = 10;

    private RootDeserializerInterface $rootDeserializer;
    private Cases $cases;

    private bool $drawing = false;

    public function __construct(
        RootDeserializerInterface $rootDeserializer,
        Cases $cases
    )
    {
        parent::__construct([
            'id' => self::ID,
            'lang_code' => Language::RU,
        ]);

        $this->rootDeserializer = $rootDeserializer;
        $this->cases = $cases;

        $this->title = self::TITLE;
        $this->description = self::DESCRIPTION;

        $this->prepare();
    }

    public function makeData(?array $data = null): EightsData
    {
        if ($data !== null) {
            try {
                return $this->rootDeserializer->deserialize($data);
            } catch (InvalidArgumentException $ex) {
                throw $ex;
                // ??
                // just ignore it
                // this is needed for parsing a data without a type
            }
        }

        return new EightsData($data);
    }

    public function executeCommand(string $command): StoryMessageSequence
    {
        switch ($command) {
            case self::RULES_COMMAND:
                return new StoryMessageSequence(
                    new TextMessage(
                        '<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ ¬´–í–æ—Å—å–º–µ—Ä–∫–∏¬ª</b>',
                        '–ö–æ–ª–æ–¥–∞: 52 –∫–∞—Ä—Ç—ã + 2 –¥–∂–æ–∫–µ—Ä–∞',
                        '–ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤: 2-10 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 2-4)',
                        '–ò–≥—Ä–æ–∫–∞–º —Ä–∞–∑–¥–∞–µ—Ç—Å—è –ø–æ 7 –∫–∞—Ä—Ç ‚Äî –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ 5 ‚Äî –¥–ª—è —Ç—Ä–µ—Ö –∏ –ø–æ 4, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ 4 –∏ –±–æ–ª—å—à–µ.',
                        '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã —Å–¥–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ–ª –≤ –æ—Ç–∫—Ä—ã—Ç—É—é, –æ—Å—Ç–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∫–ª–∞–¥–µ—Ç—Å—è —Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö.',
                        '–ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∞—Å—Ç—å –Ω–∞ —Å—Ç–æ–ª –∫–∞—Ä—Ç—É —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ –∏ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ.',
                        '–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç ‚ô¶4, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å —á–µ—Ç–≤–µ—Ä–∫—É –∏–ª–∏ <b>‚ô¶ –±—É–±–Ω—ã</b>.',
                        '–ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã, –æ–Ω –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é.',
                        '–ï—Å–ª–∏ –≤ –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç, –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.'
                    ),
                    new TextMessage(
                        '<i>–û—Å–æ–±—ã–µ –∫–∞—Ä—Ç—ã</i>',
                        '- <b>8 (–≤–æ—Å—å–º–µ—Ä–∫–∞):</b> –í–æ—Å—å–º–µ—Ä–∫—É –º–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É. –ü—Ä–∏ —ç—Ç–æ–º –∏–≥—Ä–æ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç –º–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –æ–±—è–∑–∞–Ω –ø–æ–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫.',
                        '- <b>üÉè (–¥–∂–æ–∫–µ—Ä):</b> –î–∂–æ–∫–µ—Ä–∞ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É. –ü—Ä–∏ —ç—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥ –¥–∂–æ–∫–µ—Ä–æ–º. –ï—Å–ª–∏ –ø–æ–¥ –¥–∂–æ–∫–µ—Ä–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –ª—é–±—É—é –∫–∞—Ä—Ç—É.',
                        '- <b>J (–≤–∞–ª–µ—Ç):</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.',
                        '- <b>6 (—à–µ—Å—Ç–µ—Ä–∫–∞):</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∏–∑ –∫–æ–ª–æ–¥—ã 1 –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.',
                        '- <b>7 (—Å–µ–º–µ—Ä–∫–∞):</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∏–∑ –∫–æ–ª–æ–¥—ã 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.'
                    ),
                    new TextMessage(
                        '<i>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã</i>',
                        '–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –≤—ã–ª–æ–∂–∏–≤—à–∏–π –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏.',
                        '–ï—Å–ª–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω–µ—á–µ–≥–æ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–æ–ª, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∏—á—å–µ–π.'
                    ),
                    new TextMessage(
                        '<i>–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</i>',
                        '–¶–µ–ª—å—é –∏–≥—Ä—ã —è–≤–ª—è–µ—Ç—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞–±—Ä–∞–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç.'
                    )
                );
        }

        return parent::executeCommand($command);
    }

    protected function build(): void
    {
        $builder = new StoryBuilder($this);

        $start = $builder->addSkipNode(
            self::START,
            self::PLAYERS_NUMBER_CHOICE,
            [
                Suit::all()->join(),
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–Ω—É—é –∏–≥—Ä—É <b>¬´–í–æ—Å—å–º–µ—Ä–∫–∏¬ª</b>!',
                'üìö –ü—Ä–∞–≤–∏–ª–∞: ' . self::RULES_COMMAND,
                '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ —Å ü§ñ –±–æ—Ç–∞–º–∏.',
            ]
        );

        $this->setStartNode($start);

        $builder->addActionNode(
            self::PLAYERS_NUMBER_CHOICE,
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:',
            [
                self::TWO_PLAYERS => '2',
                self::THREE_PLAYERS => '3',
                self::FOUR_PLAYERS => '4',
            ]
        );

        $builder
            ->addSkipNode(self::TWO_PLAYERS, self::START_GAME)
            ->does(
                fn (EightsData $d) => $d->withPlayerCount(2)
            );

        $builder
            ->addSkipNode(self::THREE_PLAYERS, self::START_GAME)
            ->does(
                fn (EightsData $d) => $d->withPlayerCount(3)
            );

        $builder
            ->addSkipNode(self::FOUR_PLAYERS, self::START_GAME)
            ->does(
                fn (EightsData $d) => $d->withPlayerCount(4)
            );

        $builder->addFunctionNode(self::START_GAME, [$this, 'startGame']);
        $builder->addFunctionNode(self::AUTO_MOVES, [$this, 'autoMoves']);
        $builder->addFunctionNode(self::HUMAN_MOVE, [$this, 'humanMove']);
        $builder->addFunctionNode(self::SUIT_CHOICE, [$this, 'suitChoice']);

        $builder->addFinishNode(self::FINISH_GAME);
    }

    public function startGame(
        TelegramUser $tgUser,
        EightsData $data,
        ?string $input = null
    ): StoryMessageSequence
    {
        $data->initGame($tgUser);

        $game = $data->game();
        $players = $game->players();

        return
            StoryMessageSequence::make(
                new StoryMessage(
                    self::AUTO_MOVES,
                    ['–ò–≥—Ä–∞—é—Ç:', Text::join($players)]
                ),
                $game->start()
            )
            ->withData($data);
    }

    public function autoMoves(
        TelegramUser $tgUser,
        EightsData $data,
        ?string $input = null
    ): StoryMessageSequence
    {
        $game = $data->game();

        $sequence = new StoryMessageSequence(
            ...$game->runTillBreak()
        );

        if ($game->isFinished()) {
            return $sequence
                ->add(new StoryMessage(self::FINISH_GAME))
                ->withData($data);
        }

        // the player isn't needed, but the check is needed
        $this->getAndCheckPlayer($game, $tgUser);

        return $sequence
            ->add(new StoryMessage(self::HUMAN_MOVE))
            ->withData($data);
    }

    public function humanMove(
        TelegramUser $tgUser,
        EightsData $data,
        ?string $input = null
    ): StoryMessageSequence
    {
        $sequence = StoryMessageSequence::empty();

        $beenDrawing = $this->drawing;
        $this->drawing = false;

        $game = $data->game();
        $player = $this->getAndCheckPlayer($game, $tgUser);
        $playableCards = $game->getPlayableCardsFor($player);

        // play a card if it's valid
        if (strlen($input) > 0 && $playableCards->any()) {
            $card = Card::tryParse($input);

            if (!$playableCards->contains($card)) {
                $sequence->addText('–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç—ã. –í—ã —á—Ç–æ, —à—É–ª–µ—Ä{|–∫–∞}? ü§î');
            } else {
                $events = $game->putCard($player, $card);

                // for eight go to suit choice
                if ($card->isRank(Rank::eight())) {
                    return $sequence
                        ->add(
                            new StoryMessage(self::SUIT_CHOICE)
                        )
                        ->withData($data);
                }

                // otherwise go to next player
                $game->goToNextPlayer();

                return $sequence
                    ->add(
                        new StoryMessage(
                            self::AUTO_MOVES,
                            $events->messagesFor($player)->toArray()
                        )
                    )
                    ->withData($data);
            }
        }

        /** @var CardEventInterface */
        $event = null;

        // draw a card?
        if ($input === self::DRAW_CARD_COMMAND && !$game->isDeckEmpty()) {
            $event = $game->drawToHand($player);
            Assert::notNull($event);
            $this->drawing = true;
        }

        // no cards?
        if ($input === self::NO_CARDS_COMMAND && $game->isDeckEmpty()) {
            $event = $game->hasNoCardsToPut($player);
            $game->goToNextPlayer();
        }

        if ($event) {
            return $sequence
                ->add(
                    new StoryMessage(
                        self::AUTO_MOVES,
                        [$event->messageFor($player)],
                    )
                )
                ->withData($data);
        }

        return $sequence
            ->add(
                new StoryMessage(
                    self::HUMAN_MOVE,
                    $beenDrawing && $playableCards->isEmpty()
                        ? []
                        : [
                            $game->statusString(),
                            Text::join(
                                $game->players()->except($player)->handsStrings()
                            ),
                            sprintf(
                                '–£ –≤–∞—Å %s %s: %s',
                                $player->handSize(),
                                $this->cases->caseForNumber('–∫–∞—Ä—Ç–∞', $player->handSize()),
                                $player->hand()
                                    ->sortReverse([EightsGame::class, 'sort'])
                                    ->toRuString()
                            )
                        ]
                ),
                $playableCards->any()
                    ? new StoryMessage(
                        0,
                        ['–í–∞—à —Ö–æ–¥:'],
                        [...$playableCards
                            ->distinct()
                            ->sortReverse([EightsGame::class, 'sort'])
                            ->stringize(
                                fn (Card $c) => $c->name('ru')
                            )]
                    )
                    : ($game->isDeckEmpty()
                        ? new StoryMessage(
                            0,
                            ['–í–∞–º –Ω–µ—á–µ–º —Ö–æ–¥–∏—Ç—å, –∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞...'],
                            [self::NO_CARDS_COMMAND]
                        )
                        : new StoryMessage(
                            0,
                            ['–í–∞–º –Ω–µ—á–µ–º —Ö–æ–¥–∏—Ç—å, –±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É üëá'],
                            [self::DRAW_CARD_COMMAND]
                        )
                    )
            )
            ->withData($data);
    }

    public function suitChoice(
        TelegramUser $tgUser,
        EightsData $data,
        ?string $input = null
    ): StoryMessageSequence
    {
        $sequence = StoryMessageSequence::empty();

        $game = $data->game();
        $player = $this->getAndCheckPlayer($game, $tgUser);

        // choose a suit if it's valid
        if (strlen($input) > 0) {
            $suit = Suit::tryParse($input);

            if (!$suit) {
                $sequence->addText('–ù–µ –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...');
            } else {
                // apply suit...
                $events = $game->playerChoosesEightSuit($player, $suit);

                $game->goToNextPlayer();

                return $sequence
                    ->add(
                        new StoryMessage(
                            self::AUTO_MOVES,
                            $events->messagesFor($player)->toArray()
                        )
                    )
                    ->withData($data);
            }
        }

        return $sequence
            ->add(
                new StoryMessage(
                    self::SUIT_CHOICE,
                    ['–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç—å (—Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É —ç—Ç–æ–π –º–∞—Å—Ç–∏):'],
                    [...Suit::all()->stringize()]
                )
            )
            ->withData($data);
    }

    private function getAndCheckPlayer(EightsGame $game, TelegramUser $tgUser) : Human
    {
        /** @var Human */
        $player = $game->currentPlayer();

        Assert::isInstanceOf($player, Human::class);
        Assert::true($player->telegramUser()->equals($tgUser));

        return $player;
    }
}
