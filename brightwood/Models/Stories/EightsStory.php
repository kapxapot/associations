<?php

namespace Brightwood\Models\Stories;

use App\Models\TelegramUser;
use Brightwood\Collections\MessageCollection;
use Brightwood\Models\Data\EightsData;
use Brightwood\Models\Messages\Interfaces\MessageInterface;
use Brightwood\Models\Messages\StoryMessage;
use Brightwood\Models\Messages\StoryMessageSequence;
use Brightwood\Models\Messages\TextMessage;
use Brightwood\Models\Nodes\ActionNode;
use Brightwood\Models\Nodes\FinishNode;
use Brightwood\Models\Nodes\FunctionNode;
use Brightwood\Models\Nodes\SkipNode;
use Plasticode\Util\Text;

class EightsStory extends Story
{
    private const RULES_COMMAND = '/rules';

    private const START = 1;
    private const TWO_PLAYERS = 2;
    private const THREE_PLAYERS = 3;
    private const FOUR_PLAYERS = 4;
    private const PLAYERS_NUMBER_CHOICE = 5;
    private const START_GAME = 6;
    private const FINISH_GAME = 7;
    private const NEXT_MOVE = 8;

    public function __construct(
        int $id
    )
    {
        parent::__construct($id, '‚ô† –í–æ—Å—å–º–µ—Ä–∫–∏');
    }

    public function makeData(TelegramUser $tgUser, ?array $data = null) : EightsData
    {
        return new EightsData($tgUser, $data);
    }

    public function executeCommand(string $command) : MessageCollection
    {
        switch ($command) {
            case self::RULES_COMMAND:
                return MessageCollection::collect(
                    new TextMessage(
                        '<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ ¬´–í–æ—Å—å–º–µ—Ä–∫–∏¬ª</b>',
                        '–ö–æ–ª–æ–¥–∞: 52 –∫–∞—Ä—Ç—ã + 2 –¥–∂–æ–∫–µ—Ä–∞',
                        '–ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤: 2-10 (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 2-4)',
                        '–ò–≥—Ä–æ–∫–∞–º —Ä–∞–∑–¥–∞–µ—Ç—Å—è –ø–æ 7 –∫–∞—Ä—Ç ‚Äî –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤, –ø–æ 5 ‚Äî –¥–ª—è —Ç—Ä–µ—Ö –∏ –ø–æ 4, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ 4 –∏ –±–æ–ª—å—à–µ.',
                        '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã —Å–¥–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ–ª –≤ –æ—Ç–∫—Ä—ã—Ç—É—é, –æ—Å—Ç–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∫–ª–∞–¥–µ—Ç—Å—è —Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö.',
                        '–ò–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∞—Å—Ç—å –Ω–∞ —Å—Ç–æ–ª –∫–∞—Ä—Ç—É —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ –∏ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ.',
                        '–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç ‚ô¶4, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å —á–µ—Ç–≤–µ—Ä–∫—É –∏–ª–∏ <b>‚ô¶ –±—É–±–Ω—ã</b>.',
                        '–ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã, –æ–Ω –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é.',
                        '–ï—Å–ª–∏ –≤ –∫–æ–ª–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç, –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.'
                    ),
                    new TextMessage(
                        '<i>–û—Å–æ–±—ã–µ –∫–∞—Ä—Ç—ã</i>',
                        '- <b>8 (–≤–æ—Å—å–º–µ—Ä–∫–∞):</b> –í–æ—Å—å–º–µ—Ä–∫—É –º–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É. –ü—Ä–∏ —ç—Ç–æ–º –∏–≥—Ä–æ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç –º–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –æ–±—è–∑–∞–Ω –ø–æ–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫.',
                        '- <b>üÉè (–¥–∂–æ–∫–µ—Ä):</b> –î–∂–æ–∫–µ—Ä–∞ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É. –ü—Ä–∏ —ç—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥ –¥–∂–æ–∫–µ—Ä–æ–º. –ï—Å–ª–∏ –ø–æ–¥ –¥–∂–æ–∫–µ—Ä–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –ª—é–±—É—é –∫–∞—Ä—Ç—É.',
                        '- <b>J (–≤–∞–ª–µ—Ç):</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.',
                        '- <b>6 (—à–µ—Å—Ç–µ—Ä–∫–∞):</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∏–∑ –∫–æ–ª–æ–¥—ã 1 –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.',
                        '- <b>7 (—Å–µ–º–µ—Ä–∫–∞):</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∏–∑ –∫–æ–ª–æ–¥—ã 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.'
                    ),
                    new TextMessage(
                        '<i>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã</i>',
                        '–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫, –≤—ã–ª–æ–∂–∏–≤—à–∏–π –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏.',
                        '–ï—Å–ª–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω–µ—á–µ–≥–æ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–æ–ª, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∏—á—å–µ–π.'
                    ),
                    new TextMessage(
                        '<i>–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</i>',
                        '–¶–µ–ª—å—é –∏–≥—Ä—ã —è–≤–ª—è–µ—Ç—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞–±—Ä–∞–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç.'
                    )
                );
        }

        return parent::executeCommand($command);
    }

    protected function build() : void
    {
        $this->setStartNode(
            new SkipNode(
                self::START,
                [
                    '‚ô†‚ô•‚ô£‚ô¶',
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–Ω—É—é –∏–≥—Ä—É <b>¬´–í–æ—Å—å–º–µ—Ä–∫–∏¬ª</b>!',
                    'üìö –ü—Ä–∞–≤–∏–ª–∞: ' . self::RULES_COMMAND,
                    '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ —Å ü§ñ –±–æ—Ç–∞–º–∏.'
                ],
                self::PLAYERS_NUMBER_CHOICE
            )
        );

        $this->addNode(
            new ActionNode(
                self::PLAYERS_NUMBER_CHOICE,
                [
                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:'
                ],
                [
                    self::TWO_PLAYERS => '2',
                    self::THREE_PLAYERS => '3',
                    self::FOUR_PLAYERS => '4'
                ]
            )
        );

        $this->addNode(
            (new SkipNode(
                self::TWO_PLAYERS,
                [],
                self::START_GAME
            ))->do(
                fn (EightsData $d) => $d->setPlayerCount(2)
            )
        );

        $this->addNode(
            (new SkipNode(
                self::THREE_PLAYERS,
                [],
                self::START_GAME
            ))->do(
                fn (EightsData $d) => $d->setPlayerCount(3)
            )
        );

        $this->addNode(
            (new SkipNode(
                self::FOUR_PLAYERS,
                [],
                self::START_GAME
            ))->do(
                fn (EightsData $d) => $d->setPlayerCount(4)
            )
        );

        $this->addNode(
            new FunctionNode(
                self::START_GAME,
                function (EightsData $data) {
                    $data = $data->start();
                    $game = $data->game();
                    $players = $game->players();

                    $startMessage = new StoryMessage(
                        self::NEXT_MOVE,
                        [
                            '–ò–≥—Ä–∞—é—Ç:',
                            Text::join(
                                $players->toArray()
                            )
                        ]
                    );

                    $log = $game->run();

                    $sequence = new StoryMessageSequence($startMessage);
                    $sequence->add(...$log);

                    return $sequence->withData($data);
                }
            )
        );

        $this->addNode(
            new FinishNode(
                self::NEXT_MOVE,
                []
            )
        );
    }
}
