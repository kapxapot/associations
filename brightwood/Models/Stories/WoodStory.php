<?php

namespace Brightwood\Models\Stories;

use Brightwood\Models\Data\WoodData;
use Brightwood\Models\Nodes\ActionNode;
use Brightwood\Models\Nodes\FinishNode;
use Brightwood\Models\Nodes\RedirectNode;
use Brightwood\Models\Nodes\SkipNode;

class WoodStory extends Story
{
    public function __construct(
        int $id
    )
    {
        parent::__construct($id, '–õ–µ—Å');
    }

    public static function initData() : WoodData
    {
        return new WoodData();
    }

    protected function build() : void
    {
        $this->setStartNode(
            new ActionNode(
                1,
                [
                    '–í—ã –≥—É–ª—è–ª–∏ –ø–æ –ª–µ—Å—É üå≤üå≤üå≤ –∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å. üòÆ'
                ],
                [
                    5 => '–°–µ—Å—Ç—å –Ω–∞ –ø–µ–Ω–µ–∫ –∏ –∑–∞–ø–ª–∞–∫–∞—Ç—å',
                    3 => '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥'
                ]
            )
        );

        $this->addNode(
            new FinishNode(
                2,
                [
                    '–í—ã —É–º–µ—Ä–ª–∏ –æ—Ç <b>–≥–æ–ª–æ–¥–∞</b>. üíÄ'
                ]
            )
        );

        $this->addNode(
            new RedirectNode(
                3,
                [
                    '–í—ã –¥–æ–ª–≥–æ –±—Ä–æ–¥–∏–ª–∏ –ø–æ –ª–µ—Å—É üå≤üå≤üå≤ –≤ –ø–æ–∏—Å–∫–∞—Ö –≤—ã—Ö–æ–¥–∞.'
                ],
                [
                    1 => 4,
                    4 => 1
                ]
            )
        );

        $this->addNode(
            new FinishNode(
                4,
                [
                    '–í—ã –Ω–∞—à–ª–∏ –¥–æ—Ä–æ–≥—É –∏ –≤—ã–±—Ä–∞–ª–∏—Å—å –∏–∑ –ª–µ—Å–∞. üéâüéâüéâ'
                ]
            )
        );

        $this->addNode(
            new RedirectNode(
                5,
                [
                    '–í—ã —Å–µ–ª–∏ –Ω–∞ –ø–µ–Ω–µ–∫, –ø—Ä–æ–ø–ª–∞–∫–∞–ª–∏ –≤–µ—Å—å –¥–µ–Ω—å –∏ —É—Å–Ω—É–ª–∏. üò¥'
                ],
                [
                    6 => 3,
                    7 => 1,
                    2 => 1
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                6,
                [
                    '–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –≥–¥–µ –≤—ã—Ö–æ–¥ –∏–∑ –ª–µ—Å–∞. üòï'
                ],
                [
                    5 => '–°–µ—Å—Ç—å –Ω–∞ –ø–µ–Ω–µ–∫ –∏ –∑–∞–ø–ª–∞–∫–∞—Ç—å',
                    3 => '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥'
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                7,
                [
                    '–í–∞—Å —Ä–∞–∑–±—É–¥–∏–ª–∞ <b>–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è</b> üë©‚Äçüë©‚Äçüëß‚Äçüëß, –∫–æ—Ç–æ—Ä–æ–π –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è –≤–∞—à –ø–µ–Ω–µ–∫. ü§î –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å —É–π—Ç–∏.'
                ],
                1
            )
        );
    }
}
