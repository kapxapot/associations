<?php

namespace Brightwood\Models\Stories;

use Brightwood\Models\Data\WoodData;
use Brightwood\Models\Links\RedirectLink;
use Brightwood\Models\Nodes\ActionNode;
use Brightwood\Models\Nodes\FinishNode;
use Brightwood\Models\Nodes\RedirectNode;
use Brightwood\Models\Nodes\SimpleRedirectNode;
use Brightwood\Models\Nodes\SkipNode;

class WoodStory extends Story
{
    private const START = 1;
    private const STARVED = 2;
    private const WANDERING = 3;
    private const EXIT = 4;
    private const STUMP_WEEPING = 5;
    private const CLEARING_WAKE_UP = 6;
    private const PUTIN_BITCHES = 7;
    private const EATEN_IN_SLEEP = 8;
    private const CLEARING = 9;
    private const FELL_IN_PIT = 10;
    private const FOUND_BERRIES = 11;
    private const FOUND_MUSHROOMS = 12;
    private const MET_BEAR = 13;
    private const GENERIC_DEATH = 14;
    private const GOT_OUT_OF_PIT = 15;
    private const EAT_BERRIES = 16;
    private const EAT_MUSHROOMS = 17;
    private const AIMLESS_WANDER = 18;
    private const ASSAULT_BEAR = 19;
    private const CLIMB_TREE = 20;
    private const RUN_AWAY = 21;
    private const BEAR_SCARED = 22;
    private const BEAR_NOT_SCARED = 23;
    private const TREE_JUMP = 24;
    private const KICK_BEAR = 25;
    private const ON_A_TREE = 26;
    private const KICK_SUCCESS = 27;
    private const KICK_FAIL = 28;
    private const GUMMY_BEARS = 29;

    public function __construct(
        int $id
    )
    {
        parent::__construct($id, 'üå≤ –õ–µ—Å', true);
    }

    public function makeData(?array $data = null) : WoodData
    {
        return new WoodData($data);
    }

    protected function build() : void
    {
        $this->setMessagePrefix('–î–µ–Ω—å: {day}, –ó–¥–æ—Ä–æ–≤—å–µ: {hp}');

        $this->setStartNode(
            new SkipNode(
                self::START,
                [
                    '–í—ã –≥—É–ª—è–ª–∏ –ø–æ üå≤ <b>–ª–µ—Å—É</b> –∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å. üòÆ'
                ],
                self::CLEARING
            )
        );

        $this->addNode(
            new FinishNode(
                self::STARVED,
                [
                    '–í—ã —É–º–µ—Ä–ª–∏ –æ—Ç <b>–≥–æ–ª–æ–¥–∞</b>. üíÄ'
                ]
            )
        );

        $this->addNode(
            (new FinishNode(
                self::GENERIC_DEATH,
                [
                    '–í—ã —É–º–µ—Ä–ª–∏. üíÄ'
                ]
            ))->do(
                fn (WoodData $d) => $d->kill()
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::WANDERING,
                [
                    '–í—ã –¥–æ–ª–≥–æ –±—Ä–æ–¥–∏–ª–∏ –ø–æ üå≤ <b>–ª–µ—Å—É</b> –≤ –ø–æ–∏—Å–∫–∞—Ö –≤—ã—Ö–æ–¥–∞.'
                ],
                [
                    new RedirectLink(self::FELL_IN_PIT),
                    new RedirectLink(self::FOUND_BERRIES),
                    new RedirectLink(self::FOUND_MUSHROOMS),
                    new RedirectLink(self::MET_BEAR),
                    new RedirectLink(self::GUMMY_BEARS, 0.3),
                    (new RedirectLink(self::EXIT))->if(
                        fn (WoodData $d) => $d->hasWanderedEnough()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->wander()
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::FELL_IN_PIT,
                [
                    '–ó–∞—Å–º–æ—Ç—Ä–µ–≤—à–∏—Å—å –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ –≤–∏–¥—ã üèû, –≤—ã —Å–ª—É—á–∞–π–Ω–æ —É–ø–∞–ª–∏ –≤ –≥–ª—É–±–æ–∫—É—é üï≥ <b>—è–º—É</b> –∏ —Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª–∏—Å—å. ü§ï'
                ],
                [
                    (new RedirectLink(self::GOT_OUT_OF_PIT))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::GENERIC_DEATH))->if(
                        fn (WoodData $d) => $d->isDead()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->hit(1)
            )
        );

        $this->addNode(
            new SkipNode(
                self::GOT_OUT_OF_PIT,
                [
                    '–° —Ç—Ä—É–¥–æ–º –≤—ã–±—Ä–∞–≤—à–∏—Å—å –∏–∑ üï≥ <b>—è–º—ã</b>, –≤—ã –¥–æ–±—Ä–∞–ª–∏—Å—å üë£ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–ª—è–Ω—ã.'
                ],
                self::CLEARING
            )
        );

        $this->addNode(
            new ActionNode(
                self::FOUND_BERRIES,
                [
                    '–í—ã –Ω–∞—à–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ üçí <b>—è–≥–æ–¥—ã</b>.'
                ],
                [
                    self::EAT_BERRIES => 'üçí –ï—Å—Ç—å',
                    self::CLEARING => '‚ùå –ù–µ –µ—Å—Ç—å'
                ]
            )
        );

        $this->addNode(
            (new SkipNode(
                self::EAT_BERRIES,
                [
                    'üçí <b>—è–≥–æ–¥—ã</b> –æ–∫–∞–∑–∞–ª–∏—Å—å –≤–∫—É—Å–Ω—ã–º–∏ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º–∏. –í—Å–∫–æ—Ä–µ –≤—ã —Å–Ω–æ–≤–∞ –≤—ã—à–ª–∏ üë£ –Ω–∞ –ø–æ–ª—è–Ω—É.'
                ],
                self::CLEARING
            ))->do(
                fn (WoodData $d) => $d->heal(1)
            )
        );

        $this->addNode(
            new ActionNode(
                self::FOUND_MUSHROOMS,
                [
                    '–ü–æ–¥ –¥–µ—Ä–µ–≤–æ–º —Ä–∞—Å—Ç—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ üçÑ <b>–≥—Ä–∏–±—ã</b>.'
                ],
                [
                    self::EAT_MUSHROOMS => 'üçÑ –ï—Å—Ç—å',
                    self::CLEARING => '‚ùå –ù–µ –µ—Å—Ç—å'
                ]
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::EAT_MUSHROOMS,
                [
                    '–í–∞–º —Å—Ç–∞–ª–æ –Ω–µ—Ö–æ—Ä–æ—à–æ. ü§¢',
                    '–ó–∞—á–µ–º –∂–µ –≤—ã –µ–ª–∏ üçÑ <b>–º—É—Ö–æ–º–æ—Ä—ã</b>?'
                ],
                [
                    (new RedirectLink(self::AIMLESS_WANDER))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::GENERIC_DEATH))->if(
                        fn (WoodData $d) => $d->isDead()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->hit(1)
            )
        );

        $this->addNode(
            (new SkipNode(
                self::AIMLESS_WANDER,
                [
                    '–í—ã –±–µ—Å—Ü–µ–ª—å–Ω–æ —Å–ª–æ–Ω—è–ª–∏—Å—å –ø–æ üå≤ <b>–ª–µ—Å—É</b> –∏ —Å–Ω–æ–≤–∞ –≤—ã—à–ª–∏ –Ω–∞ –ø–æ–ª—è–Ω—É.'
                ],
                self::CLEARING
            ))->do(
                fn (WoodData $d) => $d->wander()
            )
        );

        $this->addNode(
            new FinishNode(
                self::EXIT,
                [
                    '–í—ã –Ω–∞—à–ª–∏ –¥–æ—Ä–æ–≥—É –∏ –≤—ã–±—Ä–∞–ª–∏—Å—å –∏–∑ üå≤ <b>–ª–µ—Å–∞</b>.',
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ'
                ]
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::STUMP_WEEPING,
                [
                    '–í—ã —Å–µ–ª–∏ –Ω–∞ <b>–ø–µ–Ω–µ–∫</b>, –ø—Ä–æ–ø–ª–∞–∫–∞–ª–∏ üò≠ –≤–µ—Å—å –¥–µ–Ω—å –∏ —É—Å–Ω—É–ª–∏. üò¥'
                ],
                [
                    (new RedirectLink(self::CLEARING_WAKE_UP, 2))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::PUTIN_BITCHES, 2))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::EATEN_IN_SLEEP, 1))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::STARVED))->if(
                        fn (WoodData $d) => $d->isDead()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->nextDay()
            )
        );

        $this->addNode(
            new SkipNode(
                self::CLEARING_WAKE_UP,
                [
                    '–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤—ã –≤—Å–ø–æ–º–Ω–∏–ª–∏, —á—Ç–æ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å –≤ üå≤ <b>–ª–µ—Å—É</b>. üòï'
                ],
                self::CLEARING
            )
        );

        $this->addNode(
            new SkipNode(
                self::PUTIN_BITCHES,
                [
                    '–í–∞—Å —Ä–∞–∑–±—É–¥–∏–ª–∞ üë©‚Äçüë©‚Äçüëß‚Äçüëß <b>–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è</b>, –∫–æ—Ç–æ—Ä–æ–π –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è –≤–∞—à –ø–µ–Ω–µ–∫. ü§î',
                    '–í–∞–º –ø—Ä–∏—à–ª–æ—Å—å —É–π—Ç–∏. üë£'
                ],
                self::WANDERING
            )
        );

        $this->addNode(
            new SkipNode(
                self::EATEN_IN_SLEEP,
                [
                    '–ü–æ–∫–∞ –≤—ã —Å–ø–∞–ª–∏, –ø—Ä–∏—à–ª–∏ üê∫ <b>–≤–æ–ª–∫–∏</b> –∏ –∑–∞–≥—Ä—ã–∑–ª–∏ –≤–∞—Å.'
                ],
                self::GENERIC_DEATH
            )
        );

        $this->addNode(
            (new ActionNode(
                self::CLEARING,
                [
                    '–í—ã –Ω–∞ –ø–æ–ª—è–Ω–µ, –≥–¥–µ –ª–∏—à—å –ø–∞—Ä–∞ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –æ–¥–∏–Ω–æ–∫–∏–π <b>–ø–µ–Ω–µ–∫</b>.'
                ],
                [
                    self::STUMP_WEEPING => '–°–µ—Å—Ç—å –Ω–∞ –ø–µ–Ω–µ–∫',
                    self::WANDERING => 'üë£ –ò—Å–∫–∞—Ç—å –≤—ã—Ö–æ–¥'
                ]
            ))
        );

        $this->addNode(
            new ActionNode(
                self::MET_BEAR,
                [
                    '–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ üêª <b>–º–µ–¥–≤–µ–¥—è</b>. –ü–æ—Ö–æ–∂–µ, –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–¥—Ä—É–∂–µ–ª—é–±–Ω–æ.',
                    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–ø—É–≥–∞—Ç—å –∑–≤–µ—Ä—è, –∑–∞–ª–µ–∑—Ç—å –Ω–∞ üå≤ <b>–¥–µ—Ä–µ–≤–æ</b> –∏–ª–∏ —É–±–µ–∂–∞—Ç—å.'
                ],
                [
                    self::ASSAULT_BEAR => '–ù–∞–ø—É–≥–∞—Ç—å',
                    self::CLIMB_TREE => 'üå≤ –õ–µ–∑—Ç—å –Ω–∞ –¥–µ—Ä–µ–≤–æ',
                    self::RUN_AWAY => 'üèÉ –£–±–µ–∂–∞—Ç—å'
                ]
            )
        );

        $this->addNode(
            new SimpleRedirectNode(
                self::ASSAULT_BEAR,
                [
                    '–í—ã –ø–æ–¥–Ω—è–ª–∏ —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö –∏ –≥—Ä–æ–º–∫–æ –∑–∞—Ä—ã—á–∞–ª–∏. –¢–æ—á–Ω–µ–µ, –∑–∞–∫—Ä–∏—á–∞–ª–∏. üò±'
                ],
                [
                    self::BEAR_SCARED => 3,
                    self::BEAR_NOT_SCARED => 1
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                self::BEAR_SCARED,
                [
                    '–≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ! üêª <b>–º–µ–¥–≤–µ–¥—å</b> —É–±—Ä–∞–ª—Å—è –≤–æ—Å–≤–æ—è—Å–∏.'
                ],
                self::AIMLESS_WANDER
            )
        );

        $this->addNode(
            new ActionNode(
                self::BEAR_NOT_SCARED,
                [
                    '–£–ø—Å! üêª <b>–º–µ–¥–≤–µ–¥—å</b> –≤—Å–µ –µ—â–µ –∂–µ–ª–∞–µ—Ç –≤–∞–º–∏ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å.',
                    '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?'
                ],
                [
                    self::CLIMB_TREE => 'üå≤ –õ–µ–∑—Ç—å –Ω–∞ –¥–µ—Ä–µ–≤–æ',
                    self::RUN_AWAY => 'üèÉ –£–±–µ–∂–∞—Ç—å'
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                self::CLIMB_TREE,
                [
                    '–õ–µ–∑—Ç—å –Ω–∞ üå≤ <b>–¥–µ—Ä–µ–≤–æ</b> –æ—Ç üêª <b>–º–µ–¥–≤–µ–¥—è</b>? –¢–æ—á–Ω–æ?',
                    'üêª <b>–º–µ–¥–≤–µ–¥—å</b> –ø–æ–ª–µ–∑ –∑–∞ –≤–∞–º–∏!'
                ],
                self::ON_A_TREE
            )
        );

        $this->addNode(
            new ActionNode(
                self::ON_A_TREE,
                [
                    '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä—ã–≥–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ üå≤ <b>–¥–µ—Ä–µ–≤–æ</b> –∏–ª–∏ –ø–Ω—É—Ç—å üêª <b>–º–µ–¥–≤–µ–¥—è</b>.'
                ],
                [
                    self::TREE_JUMP => '–ü—Ä—ã–≥–Ω—É—Ç—å',
                    self::KICK_BEAR => '–ü–Ω—É—Ç—å'
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                self::TREE_JUMP,
                [
                    '–í–∞–º —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω—É—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ üå≤ <b>–¥–µ—Ä–µ–≤–æ</b>, –Ω–æ...',
                    'üêª <b>–º–µ–¥–≤–µ–¥—å</b> –ø—Ä—ã–≥–Ω—É–ª –∑–∞ –≤–∞–º–∏! üòÆ'
                ],
                self::ON_A_TREE
            )
        );

        $this->addNode(
            new RedirectNode(
                self::KICK_BEAR,
                [
                    '–í—ã —Å–æ –≤—Å–µ–π —Å–∏–ª—ã –ø–Ω—É–ª–∏ üêª <b>–º–µ–¥–≤–µ–¥—è</b>.'
                ],
                [
                    (new RedirectLink(self::KICK_SUCCESS))->if(
                        fn (WoodData $d) => $d->hasShoes()
                    ),
                    (new RedirectLink(self::KICK_FAIL))->if(
                        fn (WoodData $d) => !$d->hasShoes()
                    )
                ]
            )
        );

        $this->addNode(
            (new SkipNode(
                self::KICK_SUCCESS,
                [
                    'üêª <b>–º–µ–¥–≤–µ–¥—å</b> —Å—Ö–≤–∞—Ç–∏–ª –≤–∞—à—É üëü <b>–∫—Ä–æ—Å—Å–æ–≤–∫—É</b> –∏ —Å–∫—Ä—ã–ª—Å—è –≤ –ø–æ–¥–ª–µ—Å–∫–µ.',
                    '–°–ø—É—Å—Ç—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤—ã —Å–ø—É—Å—Ç–∏–ª–∏—Å—å –∏ –±—ã—Å—Ç—Ä–æ —É–±–µ–∂–∞–ª–∏.'
                ],
                self::AIMLESS_WANDER
            ))->do(
                fn (WoodData $d) => $d->removeShoe()
            )
        );

        $this->addNode(
            new SkipNode(
                self::KICK_FAIL,
                [
                    '–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ–±—É–≤–∏, –ø–æ—ç—Ç–æ–º—É üêª <b>–º–µ–¥–≤–µ–¥—å</b> —Å—Ö–≤–∞—Ç–∏–ª –≤–∞—Å –∑–∞ –Ω–æ–≥—É –∏ —Å–±—Ä–æ—Å–∏–ª —Å üå≤ <b>–¥–µ—Ä–µ–≤–∞</b>.'
                ],
                self::GENERIC_DEATH
            )
        );

        $this->addNode(
            new ActionNode(
                self::RUN_AWAY,
                [
                    'üêª <b>–º–µ–¥–≤–µ–¥—å</b> –±–µ–∂–∏—Ç –∑–∞ –≤–∞–º–∏.',
                    '–ú–µ–¥–≤–µ–¥–∏ –±–µ–≥–∞—é—Ç –¥–æ–≤–æ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ –æ—á–µ–Ω—å –≤—ã–Ω–æ—Å–ª–∏–≤—ã...'
                ],
                [
                    self::CLIMB_TREE => 'üå≤ –õ–µ–∑—Ç—å –Ω–∞ –¥–µ—Ä–µ–≤–æ',
                    self::RUN_AWAY => 'üèÉ –ë–µ–∂–∞—Ç—å –¥–∞–ª—å—à–µ'
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                self::GUMMY_BEARS,
                [
                    '–ù–∞—Å—Ç—É–ø–∏–≤ –Ω–∞ –∫–æ—á–∫—É, –≤—ã –≤–Ω–µ–∑–∞–ø–Ω–æ —É–ª–µ—Ç–µ–ª–∏ –≤ –Ω–µ–±–µ—Å–∞. ‚òÅ',
                    '–í—ã —É–≤–∏–¥–µ–ª–∏ üå≤ <b>–ª–µ—Å</b> –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏ –∏ —É–∑–Ω–∞–ª–∏, –≥–¥–µ –≤—ã—Ö–æ–¥.',
                    '–£–ø–∞–≤ —Å –±–æ–ª—å—à–æ–π –≤—ã—Å–æ—Ç—ã, –≤—ã —Ä–∞–∑–±–∏–ª–∏—Å—å. üí•',
                    '–ü–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞—à–µ–π –º—ã—Å–ª—å—é –±—ã–ª–æ <i>¬´–ù–µ—É–∂–µ–ª–∏ –º–∏—à–∫–∏ –ì–∞–º–º–∏...¬ª</i> ü§î'
                ],
                self::GENERIC_DEATH
            )
        );
    }
}
