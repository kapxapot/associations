<?php

namespace Brightwood\Models\Stories;

use Brightwood\Models\Data\WoodData;
use Brightwood\Models\Links\RedirectLink;
use Brightwood\Models\Nodes\ActionNode;
use Brightwood\Models\Nodes\FinishNode;
use Brightwood\Models\Nodes\RedirectNode;
use Brightwood\Models\Nodes\SkipNode;

class WoodStory extends Story
{
    private const START = 1;
    private const STARVED = 2;
    private const WANDERING = 3;
    private const EXIT = 4;
    private const STUMP_WEEPING = 5;
    private const CLEARING_WAKE_UP = 6;
    private const PUTIN_BITCHES = 7;
    private const EATEN_IN_SLEEP = 8;
    private const CLEARING = 9;
    private const FELL_IN_PIT = 10;
    private const FOUND_BERRIES = 11;
    private const FOUND_MUSHROOMS = 12;
    private const MET_BEAR = 13;
    private const GENERIC_DEATH = 14;
    private const GOT_OUT_OF_PIT = 15;
    private const EAT_BERRIES = 16;
    private const EAT_MUSHROOMS = 17;
    private const AIMLESS_WANDER = 18;

    public function __construct(
        int $id
    )
    {
        parent::__construct($id, '–õ–µ—Å');
    }

    public function makeData(?array $data = null) : WoodData
    {
        return new WoodData($data);
    }

    protected function build() : void
    {
        $this->setMessagePrefix('–î–µ–Ω—å: {day}, –ó–¥–æ—Ä–æ–≤—å–µ: {hp}');

        $this->setStartNode(
            new SkipNode(
                self::START,
                [
                    '–í—ã –≥—É–ª—è–ª–∏ –ø–æ –ª–µ—Å—É üå≤üå≤üå≤ –∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å. üòÆ'
                ],
                self::CLEARING
            )
        );

        $this->addNode(
            new FinishNode(
                self::STARVED,
                [
                    '–í—ã —É–º–µ—Ä–ª–∏ –æ—Ç <b>–≥–æ–ª–æ–¥–∞</b>. üíÄ'
                ]
            )
        );

        $this->addNode(
            new FinishNode(
                self::GENERIC_DEATH,
                [
                    '–í—ã —É–º–µ—Ä–ª–∏. üíÄ'
                ]
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::WANDERING,
                [
                    '–í—ã –¥–æ–ª–≥–æ –±—Ä–æ–¥–∏–ª–∏ –ø–æ –ª–µ—Å—É üå≤üå≤üå≤ –≤ –ø–æ–∏—Å–∫–∞—Ö –≤—ã—Ö–æ–¥–∞.'
                ],
                [
                    new RedirectLink(self::FELL_IN_PIT),
                    new RedirectLink(self::FOUND_BERRIES),
                    new RedirectLink(self::FOUND_MUSHROOMS),
                    (new RedirectLink(self::EXIT))->if(
                        fn (WoodData $d) => $d->hasWanderedEnough()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->wander()
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::FELL_IN_PIT,
                [
                    '–ó–∞—Å–º–æ—Ç—Ä–µ–≤—à–∏—Å—å –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ –≤–∏–¥—ã, –≤—ã —Å–ª—É—á–∞–π–Ω–æ —É–ø–∞–ª–∏ –≤ –≥–ª—É–±–æ–∫—É—é <b>—è–º—É</b> üï≥ –∏ —Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª–∏—Å—å.'
                ],
                [
                    (new RedirectLink(self::GOT_OUT_OF_PIT))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::GENERIC_DEATH))->if(
                        fn (WoodData $d) => $d->isDead()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->hit(1)
            )
        );

        $this->addNode(
            new SkipNode(
                self::GOT_OUT_OF_PIT,
                [
                    '–° —Ç—Ä—É–¥–æ–º –≤—ã–±—Ä–∞–≤—à–∏—Å—å –∏–∑ <b>—è–º—ã</b> üï≥, –≤—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–ª—è–Ω—ã.'
                ],
                self::CLEARING
            )
        );

        $this->addNode(
            new ActionNode(
                self::FOUND_BERRIES,
                [
                    '–í—ã –Ω–∞—à–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —è–≥–æ–¥—ã. üçí'
                ],
                [
                    self::EAT_BERRIES => '–ï—Å—Ç—å',
                    self::CLEARING => '–ù–µ –µ—Å—Ç—å'
                ]
            )
        );

        $this->addNode(
            (new SkipNode(
                self::EAT_BERRIES,
                [
                    '–Ø–≥–æ–¥—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –≤–∫—É—Å–Ω—ã–º–∏ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º–∏. –í—Å–∫–æ—Ä–µ –≤—ã —Å–Ω–æ–≤–∞ –≤—ã—à–ª–∏ –Ω–∞ –ø–æ–ª—è–Ω—É.'
                ],
                self::CLEARING
            ))->do(
                fn (WoodData $d) => $d->heal(1)
            )
        );

        $this->addNode(
            new ActionNode(
                self::FOUND_MUSHROOMS,
                [
                    '–ü–æ–¥ –¥–µ—Ä–µ–≤–æ–º —Ä–∞—Å—Ç—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∏–±—ã. üçÑ'
                ],
                [
                    self::EAT_MUSHROOMS => '–ï—Å—Ç—å',
                    self::CLEARING => '–ù–µ –µ—Å—Ç—å'
                ]
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::EAT_MUSHROOMS,
                [
                    '–í–∞–º —Å—Ç–∞–ª–æ –Ω–µ—Ö–æ—Ä–æ—à–æ. –ó–∞—á–µ–º –∂–µ –≤—ã –µ–ª–∏ –º—É—Ö–æ–º–æ—Ä—ã? ü§¢'
                ],
                [
                    (new RedirectLink(self::AIMLESS_WANDER))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::GENERIC_DEATH))->if(
                        fn (WoodData $d) => $d->isDead()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->hit(1)
            )
        );

        $this->addNode(
            (new SkipNode(
                self::AIMLESS_WANDER,
                [
                    '–í—ã –±–µ—Å—Ü–µ–ª—å–Ω–æ —Å–ª–æ–Ω—è–ª–∏—Å—å –ø–æ –ª–µ—Å—É –∏ —Å–Ω–æ–≤–∞ –≤—ã—à–ª–∏ –Ω–∞ –ø–æ–ª—è–Ω—É.'
                ],
                self::CLEARING
            ))->do(
                fn (WoodData $d) => $d->wander()
            )
        );

        $this->addNode(
            new FinishNode(
                self::EXIT,
                [
                    '–í—ã –Ω–∞—à–ª–∏ –¥–æ—Ä–æ–≥—É –∏ –≤—ã–±—Ä–∞–ª–∏—Å—å –∏–∑ –ª–µ—Å–∞. üéâüéâüéâ'
                ]
            )
        );

        $this->addNode(
            (new RedirectNode(
                self::STUMP_WEEPING,
                [
                    '–í—ã —Å–µ–ª–∏ –Ω–∞ –ø–µ–Ω–µ–∫, –ø—Ä–æ–ø–ª–∞–∫–∞–ª–∏ –≤–µ—Å—å –¥–µ–Ω—å –∏ —É—Å–Ω—É–ª–∏. üò¥'
                ],
                [
                    (new RedirectLink(self::CLEARING_WAKE_UP, 2))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::PUTIN_BITCHES, 2))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::EATEN_IN_SLEEP, 1))->if(
                        fn (WoodData $d) => $d->isAlive()
                    ),
                    (new RedirectLink(self::STARVED))->if(
                        fn (WoodData $d) => $d->isDead()
                    )
                ]
            ))->do(
                fn (WoodData $d) => $d->nextDay()
            )
        );

        $this->addNode(
            new SkipNode(
                self::CLEARING_WAKE_UP,
                [
                    '–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤—ã –≤—Å–ø–æ–º–Ω–∏–ª–∏, —á—Ç–æ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å –≤ –ª–µ—Å—É. üòï'
                ],
                self::CLEARING
            )
        );

        $this->addNode(
            new SkipNode(
                self::PUTIN_BITCHES,
                [
                    '–í–∞—Å —Ä–∞–∑–±—É–¥–∏–ª–∞ <b>–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è</b> üë©‚Äçüë©‚Äçüëß‚Äçüëß, –∫–æ—Ç–æ—Ä–æ–π –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è –≤–∞—à –ø–µ–Ω–µ–∫. ü§î –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å —É–π—Ç–∏.'
                ],
                self::WANDERING
            )
        );

        $this->addNode(
            (new FinishNode(
                self::EATEN_IN_SLEEP,
                [
                    '–ü–æ–∫–∞ –≤—ã —Å–ø–∞–ª–∏, –ø—Ä–∏—à–ª–∏ <b>–≤–æ–ª–∫–∏</b> üê∫üê∫üê∫ –∏ —Å—ä–µ–ª–∏ –≤–∞—Å. üíÄ'
                ]
            ))->do(
                fn (WoodData $d) => $d->kill()
            )
        );

        $this->addNode(
            (new ActionNode(
                self::CLEARING,
                [
                    '–í—ã –Ω–∞ –ø–æ–ª—è–Ω–µ, –≥–¥–µ –ª–∏—à—å –ø–∞—Ä–∞ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –æ–¥–∏–Ω–æ–∫–∏–π –ø–µ–Ω—å.'
                ],
                [
                    self::STUMP_WEEPING => '–°–µ—Å—Ç—å –Ω–∞ –ø–µ–Ω–µ–∫ –∏ –∑–∞–ø–ª–∞–∫–∞—Ç—å',
                    self::WANDERING => '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥'
                ]
            ))
        );
    }
}
