<?php

namespace App\Models\Brightwood\Stories;

use App\Models\Brightwood\Nodes\ActionNode;
use App\Models\Brightwood\Nodes\FinishNode;
use App\Models\Brightwood\Nodes\SkipNode;
use Plasticode\Util\Text;

class MysteryStory extends Story
{
    protected function build() : void
    {
        $this->setStartNode(
            new ActionNode(
                1,
                Text::sparseJoin(
                    [
                        '–¢—ã –≥—É–ª—è–µ—à—å —Å –≠–º–∏–ª–∏ –∏ –†–æ–±–µ—Ä—Ç–æ–º. –í–Ω–µ–∑–∞–ø–Ω–æ –†–æ–±–µ—Ä—Ç –≥–æ–≤–æ—Ä–∏—Ç:',
                        '‚Äî –î–∞–ª—å—à–µ –Ω–µ –ø–æ–π–¥–µ–º.'
                    ]
                ),
                [
                    3 => '–ü–æ—á–µ–º—É?'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                2,
                '–¢—ã –ø—Ä–∏—à–µ–ª/—à–ª–∞ –¥–æ–º–æ–π. –ò—Å—á–µ–∑–ª–∞ —Ç–≤–æ—è –º–∞–º–∞.',
                [
                    5 => '–ü–æ–π—Ç–∏ –≤ –ø–æ–ª–∏—Ü–∏—é',
                    6 => '–ü–æ–π—Ç–∏ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                3,
                Text::sparseJoin(
                    [
                        '–†–æ–±–µ—Ä—Ç:',
                        '‚Äî –¢–∞–º —Ç–∞–π–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å. –¢–∞–º –∏—Å—á–µ–∑–∞—é—Ç –ª—é–¥–∏.'
                    ]
                ),
                [
                    2 => '–ü–æ–π—Ç–∏ –¥–æ–º–æ–π',
                    6 => '–ü–æ–π–¥–µ–º —Ç—É–¥–∞!'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                5,
                '‚Äî –õ—É—á—à–µ –Ω–µ –∏–¥—Ç–∏, ‚Äî –≥–æ–≤–æ—Ä–∏—Ç –†–æ–±–µ—Ä—Ç.',
                [
                    9 => '–í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–π—Ç–∏ –≤ –ø–æ–ª–∏—Ü–∏—é',
                    10 => '–ù–µ –∏–¥—Ç–∏!'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                6,
                Text::sparseJoin(
                    [
                        '–¢—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –≠–º–∏–ª–∏ –∏ –†–æ–±–µ—Ä—Ç—É –ø–æ–π—Ç–∏ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å.',
                        '–≠–º–∏–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç –∏–¥—Ç–∏.'
                    ]
                ),
                [
                    7 => '–¢—Ä—É—Å–∏—Ö–∞!',
                    8 => '–ü—É—Å—Ç—å –Ω–µ –∏–¥–µ—Ç'
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                7,
                '–≠–º–∏–ª–∏ –≤—Å–µ-—Ç–∞–∫–∏ —Ä–µ—à–∞–µ—Ç –∏–¥—Ç–∏ —Å –≤–∞–º–∏.',
                10
            )
        );

        $this->addNode(
            new SkipNode(
                8,
                '–í—ã —Å –†–æ–±–µ—Ä—Ç–æ–º –∏–¥–µ—Ç–µ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å.',
                11
            )
        );

        $this->addNode(
            new FinishNode(9, '–ü–†–û–ò–ì–†–´–®')
        );

        $this->addNode(
            new SkipNode(
                10,
                '–í—ã —Å –≠–º–∏–ª–∏ –∏ –†–æ–±–µ—Ä—Ç–æ–º –∏–¥–µ—Ç–µ –≤ —Ç–∞–π–Ω—É—é –º–µ—Å—Ç–Ω–æ—Å—Ç—å.',
                11
            )
        );

        $this->addNode(
            new ActionNode(
                11,
                '–°–ø—É—Å—Ç—è –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –º—Ä–∞—á–Ω–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏.',
                [
                    12 => '–ó–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—å'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                12,
                Text::sparseJoin(
                    [
                        '–í—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä—å –∫—Ä–µ–ø–æ—Å—Ç–∏, –ø–æ–≤—Å—é–¥—É —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –∫–æ—Å—Ç–∏, –≤–∏–¥–∏–º–æ, —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç –ø—Ä–æ–ø–∞–≤—à–∏—Ö –ª—é–¥–µ–π. üò•',
                        '–í–¥—Ä—É–≥ –≤—ã –≤–∏–¥–∏—Ç–µ –æ–≥—Ä–æ–º–Ω–æ–≥–æ... <b>–î–†–ê–ö–û–ù–ê</b>!!! üêâ',
                        '–û–Ω —É–≤–∏–¥–µ–ª –≤–∞—Å –∏ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞–ø–∞—Å—Ç—å! üî•'
                    ]
                ),
                [
                    13 => '–ë–µ–∂–∞—Ç—å',
                    9 => '–£–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                13,
                Text::sparseJoin(
                    [
                        '–í—ã –ø—Ä–∏–±–µ–∂–∞–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É. –¢–∞–º —Ü–µ–ª—ã–π –∫–ª–∞–¥! üëë',
                        '–í–æ–∫—Ä—É–≥ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏, –¥–æ—Å–ø–µ—Ö–∏ –∏ –æ—Ä—É–∂–∏–µ.',
                        '–ò–∑ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –≤—ã—Ö–æ–¥–∞ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–∞–¥.'
                    ]
                ),
                [
                    9 => '–ù–∞–±—Ä–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞ –∏ –≤—ã–±–µ–∂–∞—Ç—å',
                    14 => '–í–∑—è—Ç—å –º–µ—á–∏ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤—ã–±–µ–∂–∞—Ç—å'
                ]
            )
        );

        $this->addNode(
            new ActionNode(
                14,
                '–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è/–ª–∞—Å—å –≤ –∫–æ–º–Ω–∞—Ç—É —Å –¥—Ä–∞–∫–æ–Ω–æ–º. –û–Ω —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –∞—Ç–∞–∫–µ.',
                [
                    15 => '–ù–∞–ø–∞—Å—Ç—å –Ω–∞ –¥—Ä–∞–∫–æ–Ω–∞',
                    16 => '–°–ø—Ä—è—Ç–∞—Ç—å—Å—è –∑–∞ –∫–æ–ª–æ–Ω–Ω—É'
                ]
            )
        );

        $this->addNode(
            new SkipNode(
                15,
                Text::sparseJoin(
                    [
                        '–í—ã –ø–æ–¥–±–µ–≥–∞–µ—Ç–µ –∫ –¥—Ä–∞–∫–æ–Ω—É, —á—Ç–æ–±—ã —É–¥–∞—Ä–∏—Ç—å –µ–≥–æ –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –±—Ä—é—Ö—É.',
                        '–ù–æ –¥—Ä–∞–∫–æ–Ω —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∏ <b>—Å–∂–∏–≥–∞–µ—Ç –≤–∞—Å</b>. üíÄ'
                    ]
                ),
                9
            )
        );

        $this->addNode(
            new SkipNode(
                16,
                Text::sparseJoin(
                    [
                        '–î—Ä–∞–∫–æ–Ω –∫–∏–¥–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–±—è, –Ω–æ —Ç—ã —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—à—å—Å—è, –∏ –æ–Ω —É–¥–∞—Ä—è–µ—Ç—Å—è –≤ –∫–æ–ª–æ–Ω–Ω—É.',
                        '–ö–æ–ª–æ–Ω–Ω–∞ —Ä—É—à–∏—Ç—Å—è –∏ –ø–∞–¥–∞–µ—Ç –Ω–∞ –¥—Ä–∞–∫–æ–Ω–∞.',
                        '<b>–î–†–ê–ö–û–ù –ü–û–í–ï–†–ñ–ï–ù!</b>'
                    ]
                ),
                17
            )
        );

        $this->addNode(
            new ActionNode(
                17,
                '–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∫–ª–∞–¥–æ–º',
                [
                    18 => '–†–∞–∑–¥–∞—Ç—å —Å–µ–º—å—è–º –ø—Ä–æ–ø–∞–≤—à–∏—Ö',
                    9 => '–û—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ'
                ]
            )
        );

        $this->addNode(
            new FinishNode(18, '–£—Ä–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª(–∞)!')
        );
    }
}
