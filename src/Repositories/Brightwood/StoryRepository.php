<?php

namespace App\Repositories\Brightwood;

use App\Collections\Brightwood\StoryCollection;
use App\Models\Brightwood\Links\ActionLink;
use App\Models\Brightwood\Links\RedirectLink;
use App\Models\Brightwood\Nodes\ActionNode;
use App\Models\Brightwood\Nodes\FinishNode;
use App\Models\Brightwood\Nodes\RedirectNode;
use App\Models\Brightwood\Nodes\StartNode;
use App\Models\Brightwood\Story;
use App\Repositories\Brightwood\Interfaces\StoryRepositoryInterface;

/**
 * Stub repository for now.
 */
class StoryRepository implements StoryRepositoryInterface
{
    private StoryCollection $stories;

    public function __construct()
    {
        $this->stories = StoryCollection::make(
            [
                $this->buildDemoStory(1)
            ]
        );
    }

    public function get(?int $id) : ?Story
    {
        return $this->stories->first(
            fn (Story $s) => $s->id() == $id
        );
    }

    private function buildDemoStory(int $id) : Story
    {
        $story = new Story($id);

        $story->setStartNode(
            new ActionNode(
                1,
                '–í—ã –≥—É–ª—è–ª–∏ –ø–æ –ª–µ—Å—É üå≤üå≤üå≤ –∏ –∑–∞–±–ª—É–¥–∏–ª–∏—Å—å. üòÆ',
                new ActionLink(5, '–°–µ—Å—Ç—å –Ω–∞ –ø–µ–Ω–µ–∫ –∏ –∑–∞–ø–ª–∞–∫–∞—Ç—å'),
                new ActionLink(3, '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥')
            )
        );

        $story->addNode(
            new FinishNode(
                2,
                '–í—ã —É–º–µ—Ä–ª–∏ –æ—Ç <b>–≥–æ–ª–æ–¥–∞</b>. üíÄ'
            )
        );

        $story->addNode(
            new RedirectNode(
                3,
                '–í—ã –¥–æ–ª–≥–æ –±—Ä–æ–¥–∏–ª–∏ –ø–æ –ª–µ—Å—É üå≤üå≤üå≤ –≤ –ø–æ–∏—Å–∫–∞—Ö –≤—ã—Ö–æ–¥–∞.',
                new RedirectLink(1, 4),
                new RedirectLink(4, 1)
            )
        );

        $story->addNode(
            new FinishNode(
                4,
                '–í—ã –Ω–∞—à–ª–∏ –¥–æ—Ä–æ–≥—É –∏ –≤—ã–±—Ä–∞–ª–∏—Å—å –∏–∑ –ª–µ—Å–∞. üéâüéâüéâ'
            )
        );

        $story->addNode(
            new RedirectNode(
                5,
                '–í—ã —Å–µ–ª–∏ –Ω–∞ –ø–µ–Ω–µ–∫, –ø—Ä–æ–ø–ª–∞–∫–∞–ª–∏ –≤–µ—Å—å –¥–µ–Ω—å –∏ —É—Å–Ω—É–ª–∏. üò¥',
                new RedirectLink(6, 3),
                new RedirectLink(7, 1),
                new RedirectLink(2, 1)
            )
        );

        $story->addNode(
            new ActionNode(
                6,
                '–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –≥–¥–µ –≤—ã—Ö–æ–¥ –∏–∑ –ª–µ—Å–∞. üòï',
                new ActionLink(5, '–°–µ—Å—Ç—å –Ω–∞ –ø–µ–Ω–µ–∫ –∏ –∑–∞–ø–ª–∞–∫–∞—Ç—å'),
                new ActionLink(3, '–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –≤—ã—Ö–æ–¥')
            )
        );

        $story->addNode(
            new RedirectNode(
                7,
                '–í–∞—Å —Ä–∞–∑–±—É–¥–∏–ª–∞ <b>–∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è</b> üôç‚Äç‚ôÄÔ∏èüôç‚Äç‚ôÄÔ∏èüôç‚Äç‚ôÄÔ∏è, –∫–æ—Ç–æ—Ä–æ–π –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è –≤–∞—à –ø–µ–Ω–µ–∫. ü§î –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å —É–π—Ç–∏.',
                new RedirectLink(1)
            )
        );

        $story->checkIntegrity();

        return $story;
    }
}
