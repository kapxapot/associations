{% extends 'main/local_layout.twig' %}

{% import 'macros.twig' as gm %}

{% set index = true %}
{% set no_disqus = true %}

{% set title = short_site_description %}

{% block content %}
    {% if not auth.user %}
        {% include 'main/includes/demo_game.twig' %}
    {% else %}
        <div class="panel" ng-cloak>
            <div class="panel-body">
                {% if game %}
                    <div ng-if="play.loading">
                        Загрузка игры...
                    </div>

                    <div ng-if="play.games.length > 1 || play.currentGame().history.length > 1" class="br-word mb-2">
                        <span ng-repeat="game in play.games" ng-class="[{true:'ml-1'}[!$first]]">
                            <a ng-href="{{'{{game.url}}'}}" data-toggle="tooltip" ng-attr-title="{{'{{\'Игра #\' + game.id}}'}}" data-placement="bottom">#</a>

                            {% include 'components/history.twig' with { 'history': 'game.history'} only %}
                        </span>
                    </div>

                    <div ng-if="play.turn()">
                        <span ng-if="!play.turn().association">Компьютер говорит новое слово:</span>
                        <span ng-if="play.turn().association">В ответ на <span class="label turn-label label-success"><a ng-href="{{'{{play.prevTurn().url}}'}}" ng-bind="play.prevTurn().display_name" {% include 'components/original_word_title.twig' with {'word': 'play.prevTurn()'} only %}></a></span> компьютер говорит:</span>
                        <span class="label br-word label-info turn-label">
                            <a ng-if="play.turn().feedback.typo" ng-href="{{'{{play.turn().url}}'}}" ng-bind="play.turn().display_name" {% include 'components/original_word_title.twig' with {'word': 'play.turn()'} only %}></a>
                            <a ng-if="!play.turn().feedback.typo" ng-href="{{'{{play.turn().url}}'}}" ng-bind="play.turn().display_name"></a>
                        </span>
                    </div>

                    <div ng-if="!play.loading && !play.turn()">
                        Компьютер не знает слов, начинайте вы.
                    </div>

                    <div ng-if="!play.loading" class="col-md-6 col-xs-12 mt-2 ph-0">
                        <form autocomplete="off">
                            <div class="form-group mb-2">
                                <label for="nextWord">Ваше слово:</label>

                                <div class="input-group">
                                    <input id="nextWord" ng-model="play.input" class="form-control" maxlength="{{ word_max_length }}" data-focus required />

                                    <span class="input-group-btn">
                                        <button type="submit" ng-click="sendWord()" class="btn btn-success ajax-button" ng-disabled="!play.input || play.loading || play.saving"><i class="fas fa-spinner fa-lg fa-spin ajax-button-spinner" ng-show="play.saving"></i><span ng-hide="play.saving">Отправить</span></button>
                                    </span>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div ng-show="!play.loading" class="col-xs-12 ph-0">
                        <div class="alert alert-danger alert-dismissable fade in mt-2">
                            <a href="javascript:void(0)" class="close" data-hide="alert" aria-label="close">&times;</a>
                            <div ng-bind-html="alertError|rawHtml"></div>
                        </div>

                        <div ng-if="play.turn()" class="mt-2">
                            <button ng-click="skip()" class="btn btn-default mr-2" ng-disabled="play.loading || play.saving"><i class="fas fa-forward action-color mr-1"></i> Другое слово</button>

                            <button ng-click="problemsDialog()" class="btn btn-default" ng-disabled="play.loading || play.saving"><i class="fas fa-exclamation-triangle danger-color mr-1"></i> Что-то не так!</button>
                        </div>
                    </div>

                    <div class="alert alert-success alert-dismissable alert-corner fade in">
                        <a href="javascript:void()" class="close" data-hide="alert" aria-label="close">&times;</a>
                        <span ng-bind="alertSuccess"></span>
                    </div>
                {% else %}
                    Активная игра не найдена. Что-то пошло не так. :/
                {% endif %}
            </div>
        </div>
    {% endif %}

    {% include 'components/news_brief.twig' %}
    {% include 'main/modals/problems.twig' %}
{% endblock %}

{% set even_more_angular %}
    $scope.languageId = {{ language.id }};

    {% if not auth.user %}
        {% include 'main/scripts/demo_game.twig' %}
    {% else %}
        $scope.showError = (error) => {
            $scope.alertError = error;
            showAlertError();
        };

        $scope.play = {
            turn: function() {
                return this.turnByIndex(0);
            },
            prevTurn: function() {
                return this.turnByIndex(1);
            },
            turnByIndex: function(index) {
                const currentGame = this.currentGame();

                if (!currentGame) {
                    return null;
                }

                const history = currentGame.history;

                if (history.length < (index + 1)) {
                    return null;
                }

                return history[history.length - index - 1];
            },
            input: null,
            loading: true,
            saving: false,
            alertError: null,
            reloadGame: function(gameId) {
                $http
                    .get('{{ api }}games/' + gameId)
                    .then(
                        response => {
                            const data = response.data;

                            const gameIndex = $scope.play.games.findIndex(
                                game => game.id == gameId
                            );

                            if (gameIndex >= 0) {
                                $scope.play.games[gameIndex] = data;
                            } else {
                                $scope.play.games.push(data);
                            }

                            $scope.updateUi();

                            if ($scope.play.loading) {
                                $scope.play.loading = false;
                            }

                            setTimeout(() => {
                                autofocus();
                            }, 100);
                        },
                        response => {
                            $scope.showError(response.statusText);
                        }
                    );
            },
            refreshGames: function() {
                for (let i = 0; i < this.games.length; i++) {
                    this.reloadGame(this.games[i].id);
                }
            },
            init: function() {
                {% if game %}
                    this.reloadGame({{ game.id }});
                {% endif %}
            },
            currentGame: function() {
                return this.games.length > 0
                    ? this.games[this.games.length - 1]
                    : null;
            },
            games: [],
            addToHistory: function(turn) {
                const currentGame = this.currentGame();

                if (currentGame && turn.game.id == currentGame.id) {
                    currentGame.history.push(turn);
                } else {
                    let newGame = {
                        id: turn.game.id,
                        url: turn.game.url,
                        history: [turn]
                    };

                    this.games.push(newGame);
                }

                $scope.updateUi();
            }
        };

        $timeout(() => {
            $scope.play.init();
        });

        $scope.processGameResponse = (data) => {
            const question = data.question;
            const answer = data.answer;
            const fetched = data.new;

            if (question) {
                $scope.play.addToHistory(question);
            }

            if (answer) {
                $scope.play.addToHistory(answer);
            }
            else if (fetched) {
                $scope.play.addToHistory(fetched);
            }

            $scope.play.input = null;
            $scope.play.saving = false;

            $scope.reloadSidebar();
        };

        $scope.processFeedbackResponse = (data) => {
            $scope.play.refreshGames();
        };

        $scope.normalize = (word) => {
            return word.trim().toLowerCase();
        };

        $scope.sendWord = () => {
            const game = $scope.play.currentGame();

            if (!game) {
                $scope.showError('Игра не начата, что-то пошло не так.');
                return;
            }

            let nextWord = $scope.play.input;
            nextWord = $scope.normalize(nextWord);

            if (!nextWord || nextWord.length == 0) {
                $scope.showError('Слово не может быть пустым.');
                return;
            }

            const turn = $scope.play.turn();

            if (turn) {
                const word = turn.word;

                if (nextWord == word) {
                    $scope.showError('Слово совпадает с предыдущим.');
                    return;
                }
            }

            const prevTurn = $scope.play.prevTurn();

            if (prevTurn) {
                const prevWord = prevTurn.word;

                if (nextWord == prevWord) {
                    $scope.showError('Слово совпадает с предпоследним.');
                    return;
                }
            }

            $scope.prePost(null);

            $scope.play.saving = true;

            let data = {
                game_id: game.id,
                word: nextWord
            };

            if (turn) {
                data.prev_turn_id = turn.turn_id;
            }

            $scope.ajax({
                url: '{{ path_for('actions.turn.create') }}',
                data: data,
                setSaving: (saving) => { $scope.play.saving = saving; },
                onSuccess: $scope.processGameResponse,
                noSuccessMessage: true,
            });
        };

        $scope.skip = () => {
            hideAlerts();

            $scope.ajax({
                url: '{{ path_for('actions.turn.skip') }}',
                onSuccess: $scope.processGameResponse,
                noSuccessMessage: true,
            });
        };

        {% include 'main/scripts/problems.twig' with {
            'on_success': '$scope.processFeedbackResponse',
            'play_mode': true
        } %}
    {% endif %}
{% endset %}
