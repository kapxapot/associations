{% import 'main/local_macros.twig' as lm %}

$scope.problems = {
    word: null,
    association: null,
    full: function() {
        return this.word && this.association;
    }
};

if ($scope.play) {
    $scope.updateProblemsModel = () => {
        let turn = $scope.play.turn();
        let prevTurn = $scope.play.prevTurn();

        $scope.problems.word = null;
        $scope.problems.association = null;

        if (turn) {
            $scope.problems.word = {
                word_id: turn.id,
                word: turn.word
            };

            if (prevTurn && turn.association) {
                $scope.problems.association = {
                    association_id: turn.association.id,
                    label:
                        prevTurn.display_name +
                        ' ' +
                        (turn.association.is_approved ? '\u21C9' : '\u2192') +
                        ' ' +
                        turn.display_name
                };
            }
        }

        $scope.updateModalWidth();
    };
} else {
    {% if word %}
        {% set word_feedback = word.feedback_by_me %}

        $scope.problems.word = {
            word_id: {{ word.id }},
            word: '{{ word.word }}',
            dislike: {{ word_feedback.is_disliked ? 'true' : 'false' }},
            withTypo: {{ word_feedback.typo ? 'true' : 'false' }},
            typo: {% if word_feedback.typo %}'{{ word_feedback.typo }}'{% else %}null{% endif %},
            withDuplicate: {{ word_feedback.duplicate ? 'true' : 'false' }},
            duplicate: {% if word_feedback.duplicate %}'{{ word_feedback.duplicate.word }}'{% else %}null{% endif %},
            mature: {{ word_feedback.is_mature ? 'true' : 'false' }}
        };
    {% endif %}

    {% if association %}
        {% set association_feedback = association.feedback_by_me %}

        $scope.problems.association = {
            association_id: {{ association.id }},
            dislike: {{ association_feedback.is_disliked ? 'true' : 'false' }},
            mature: {{ association_feedback.is_mature ? 'true' : 'false' }},
            label: '{{ lm.association(association, null, true) }}'
        };
    {% endif %}
}

$scope.updateModalWidth = () => {
    $scope.isNarrowModal = !$scope.problems.full();
};

$scope.updateModalWidth();

$scope.problemsDialog = () => {
    showModal('problems');
};

$('#problemsForm').submit(function(e) {
    $scope.modalPrePost(e);

    let obj = $.extend(true, {}, $scope.problems);

    if (obj.word) {
        if (obj.word.withTypo !== true) {
            delete obj.word.typo;
        }

        if (obj.word.withDuplicate !== true) {
            delete obj.word.duplicate;
        }

        delete obj.word.withTypo;
        delete obj.word.withDuplicate;
    }

    $scope.modalAjax({
        url: '{{ path_for('actions.feedback') }}',
        data: obj,
        view: 'problems',
        onSuccess: $scope.postSuccess,
        noSuccessMessage: true
    });
});

$scope.focusTypo = () => {
    if ($scope.problems.word.withTypo) {
        setTimeout(() => {
            $('#problemsWordTypo').focus();
        }, 100);
    }
};

$scope.focusDuplicate = () => {
    if ($scope.problems.word.withDuplicate) {
        setTimeout(() => {
            $('#problemsWordDuplicate').focus();
        }, 100);
    }
};
