{% import 'main/local_macros.twig' as lm %}

$scope.relationTypes = [
    {% for type in word_relation_types %}
        {
            id: {{ type.id }},
            name: "{{ translate(type.name) }}",
            secondary: {{ type.secondary ? 'true' : 'false' }}
        }{% if not loop.last %},{% endif %}
    {% endfor %}
].sort(function(a, b) {
    var nameA = a.name;
    var nameB = b.name;

    if (nameA < nameB) {
        return -1;
    }

    if (nameA > nameB) {
        return 1;
    }

    return 0;
});

$scope.relationData = {
    word_id: {{ word.id }},
    word: '{{ word.word|e('js') }}',
    relations: [
        {% for relation in word.relations %}
            {
                id: {{ relation.id }},
                type_id: {{ relation.typeId }},
                localized_type: "{{ translate(relation.type.name) }}",
                main_word_id: {{ relation.mainWordId }},
                main_word: "{{ relation.mainWord.word|e('js') }}",
                primary: {{ relation.isPrimary ? 'true' : 'false' }},
                updated_at: "{{ relation.updatedAtIso }}",
                state: {
                    editing: false,
                    saving: false,
                    deleting: false
                }
            }{% if not loop.last %},{% endif %}
        {% endfor %}
    ],
    state: {
        editing: false
    }
};

$scope.updateRelation = r => {
    r.type = $scope.relationTypes.find(t => t.id == r.type_id);

    if (r.type.secondary) {
        r.primary = false;
    }
};

$scope.updateRelations = () => {
    $scope.relationData.relations.forEach(r => $scope.updateRelation(r));
};

$scope.updateRelations();

$scope.relationsChanged = false;
$scope.newRelation = null;

$scope.getFirstRelationType = () => {
    if (!$scope.relationTypes.length) {
        return null;
    }

    return $scope.relationTypes[0];
};

$scope.resetNewRelation = () => {
    const type = $scope.getFirstRelationType();

    $scope.newRelation = {
        type_id: type ? type.id : null,
        main_word: null,
        primary: false
    };

    $scope.updateRelation($scope.newRelation);
};

$scope.resetNewRelation();

$scope.relationsDialog = () => {
    showModal('relations');
};

$scope.newRelationSaving = false;

$scope.saveNewRelation = () => {
    $scope.modalPrePost();

    $scope.newRelationSaving = true;

    const relation = $scope.newRelation;

    const data = {
        id: relation.id,
        word_id: $scope.relationData.word_id,
        type_id: relation.type_id,
        main_word: relation.main_word,
        primary: relation.primary
    };

    $scope.modalAjax({
        url: '{{ api }}word_relations',
        data: data,
        setSaving: (val) => {
            $scope.newRelationSaving = val;
            $scope.modalSaving = val;
        },
        onSuccess: (data, context) => {
            $scope.resetNewRelation();
            $scope.reloadRelations();

            $scope.relationsChanged = true;
        }
    });
};

$scope.editRelation = (index) => {
    $scope.relationData.state.editing = true;

    const relation = $scope.relationData.relations[index];

    // backup relation
    $scope.relationData.backup = $.extend(true, {}, relation);

    relation.state.editing = true;

    hideModalAlerts();
};

$scope.cancelEditRelation = (index) => {
    $scope.relationData.state.editing = false;

    // restore relation
    $scope.relationData.relations[index] = $.extend(true, {}, $scope.relationData.backup);
    $scope.relationData.relations[index].state.editing = false;
};

$scope.saveRelation = (index) => {
    $scope.modalPrePost();

    const relation = $scope.relationData.relations[index];

    relation.state.saving = true;

    const data = {
        id: relation.id,
        word_id: $scope.relationData.word_id,
        type_id: relation.type_id,
        main_word: relation.main_word,
        primary: relation.primary,
        updated_at: relation.updated_at
    };

    $scope.modalAjax({
        method: 'put',
        url: '{{ api }}word_relations/' + relation.id,
        data: data,
        setSaving: (val) => {
            relation.state.saving = val;
            $scope.modalSaving = val;
        },
        onSuccess: (data, context) => {
            $scope.relationData.state.editing = false;
            $scope.reloadRelations();

            $scope.relationsChanged = true;
        }
    });
};

$scope.deleteRelation = (index) => {
    if (confirm('{{ translate('Are you sure you want to delete the relation?') }}')) {
        $scope.modalPrePost();

        const relation = $scope.relationData.relations[index];

        relation.state.deleting = true;

        $scope.modalAjax({
            method: 'delete',
            url: '{{ api }}word_relations/' + relation.id,
            setSaving: (val) => {
                relation.state.deleting = val;
                $scope.modalSaving = val;
            },
            onSuccess: (data, context) => {
                $scope.reloadRelations();

                $scope.relationsChanged = true;
            },
            message: '{{ translate('Relation deleted successfully.') }}'
        });
    }
};

$scope.reloadRelations = () => {
    $scope.modalLoading = true;

    const wordId = $scope.relationData.word_id;

    $http.get('{{ api }}words/' + wordId + '/relations')
        .then(function(response) {
            const data = response.data;

            $scope.relationData.relations = data.map((datum) => {
                datum.type_id = parseInt(datum.type_id);
                datum.primary = (datum.primary == 1);
                datum.state = {
                    editing: false,
                    saving: false,
                    deleting: false
                };

                return datum;
            });

            $scope.updateRelations();

            $scope.modalLoading = false;
        }, function(response) {
            $scope.modalAlertError = '{{ translate('Failed to load word relations.') }}';

            showModalAlertError();

            $scope.modalLoading = false;
        });
};

$('#relationsView').on('hidden.bs.modal', () => {
    if ($scope.relationsChanged) {
        reloadWindow();
    }
});
